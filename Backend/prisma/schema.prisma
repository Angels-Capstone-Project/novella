// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id           String  @id @default(uuid())
email      String  @unique
username   String  @unique
password     String
birthday     DateTime?
pronouns      String?
bio         String?
LikedStories   Story[]  @relation("LikedStories")
ReadStories   Story[]  @relation("ReadStories")
stories     Story[] 
comments   Comment[]
readinglists   ReadingList[]   
libraries     Library[]    
createdAt    DateTime  @default(now())
}

model Story {
id     String    @id   @default(uuid())
title    String
description   String?
genre   String
category    String?
audience      String?
rating       String ?
status     String    @default("draft")
likedBy   User[]  @relation("LikedStories")
readBy   User[]  @relation("ReadStories")
coverImage    String?
author   User   @relation(fields: [authorId], references: [id])
authorId   String
createdAt  DateTime  @default(now())
updatedAt  DateTime  @updatedAt
comments   Comment[]
chapters   Chapter[]
readinglists   ReadingList[]   @relation("ReadingListBooks")
libraries     Library[]      @relation("LibraryBooks")
}

model Comment {
id   String   @id @default(uuid())
text   String
author  User    @relation(fields: [authorId], references: [id])
authorId   String
story   Story    @relation(fields: [storyId], references: [id])
storyId   String
createdAt   DateTime   @default(now())
}

model Chapter {
  id   String   @id @default(uuid())
  title   String
  content  String
  order     Int 
  bannerImage    String?
  story   Story    @relation(fields: [storyId], references: [id])
  storyId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

}

model Library{
  id     String     @id @default(uuid())
  user    User       @relation(fields: [userId], references: [id])
  userId   String
  story     Story    @relation("LibraryBooks", fields: [storyId], references: [id])
  storyId    String
  createdAt  DateTime  @default(now())

}

model ReadingList{
  id     String     @id @default(uuid())
  name    String
  user    User       @relation(fields: [userId], references: [id])
  userId   String
  story     Story[]    @relation("ReadingListBooks")
  createdAt  DateTime  @default(now())

}